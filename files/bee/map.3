;.MAP
;CREATE A PAGE FOR A SPHERE,
;THE FIRST BYTE IS THE SPHERE CAPABILITY TO THE DESTINATION SPHERE
;THE SECOND IS THE ACCESS INFO (READ, WRITE, AND PRIVATE OR PUBLIC COPY)
;THE THIRD IS THE SOURCE OF THE PAGE
;(FILE ACCESS CAP. OR SPHERE CAP, -1 FOR FRESH PAGE, -2 FOR ABSOLUTE PAGE,
;OR -3 FOR JUST DELETE THIS PAGE)
;THE FOURTH IS THE UPT NO. OF THE PAGE TO CREATE
;(0-7 UPT NO. IS I SPACE, 10-17 IS D-SPACE, 20-27 IS I=D SPACE)
;THE FIFTH AND SIXTH ARE THE PAGE NO. IN SOURCE (IF FILE)
;THE SEVENTH IS THE START OF THE PAGE (IN 512. WORD BLOCKS)
;THE EIGHTH IS THE LENGTH "  "    "    "  "   "      "
;IF IT IS A REQUEST FOR A PUBLIC PAGE, AND IT IS PART OF A FILE AND HE
;IS ASKING FOR WRITE ACCESS, CLEAR THE BYTE AND WORD LEFT FLAGS IN MFI
;IF IT IS ANOTHER SPHERE, AND IT IS A REQUEST FOR A PUBLIC PAGE, AND HE
;IS ASKING FOR WRITE ACCESS, EXPAND THE PAGE, AND LINK THE UPT'S TOGETHER
EMAP:	SUB #10,P	;MAKE 4 STORAGE CELLS
	JSR PC,RETNSW	;GET THE SPHERE CAP AND FLAGS
	MOV A,(P)	;SAVE IT
	JSR PC,RETNSW	;GET THE SOURCE AND UPT NO.
	MOV A,2(P)	;SAVE IT
	JSR PC,RETNSW	;GET THE PAGE NO. AT SOURCE
	MOV A,4(P)	;SAVE IT
	JSR PC,RETNSW	;GET THE LENGTH AND START OF PAGE
	MOV A,6(P)	;SAVE IT
	MOV (P),B	;THE SPHERE CAP
	BIC #177400,B	;CLEAR THE EXTRA BITS
	MOV ITM1A,A	;THE ADDRESS OF THE ITEM
	JSR PC,GCLSTA	;FIND THE CAPABILITY
	BEQ EMAP1	;COULDN'T FIND IT
	ADD B,A		;MAKE A POINT TO THE SPHERE CAP
	MOV (A),B	;GET THE TYPE AND FLAGS
	CMPB B,#.SPCAP	;IS IT A SPHERE CAPABILITY
	BEQ EMAP2	;YES
	CMPB B,#.MSCAP	;IS IT A MASTER SPHERE CAPABILITY
	BEQ EMAP2	;YES
EMAP1:	ADD #10,P	;POP OFF THE ARGUMENTS
	JMP ERETSZ	;TELL HIM HE FAILS
EMAP2:	BIT #.SPCRW,B	;DOES HE HAVE CORE WRITE CAPABILITY
	BEQ EMAP1	;NOPE
	MOV 2(A),F	;THE SPHERE NO.
	MOV F,C		;THE SPHERE NO. FOR SUPTDL
	MOVB 3(P),B	;THE UPT NO.
	BLT EMAP1	;IT IS NEGATIVE
	CMP B,#30	;IS IT A LEGAL PAGE
	BGE EMAP1	;NOPE
	CMP B,#20	;IS IT A NORMAL PAGE (IE NOT AN I=D PAGE)
	BLT EMAP3	;YES
	SUB #20,B	;MAKE IT POINT TO THE I-SPACE PAGE FIRST
	JSR PC,SUPTDL	;DELETE THE UPT
	ADD #10,B	;MAKE IT POINT TO THE D-SPACE PAGE
EMAP3:	JSR PC,SUPTDL	;DELETE THE UPT
	MOVB 2(P),C	;THE SOURCE
	CMP C,#-3	;IS IT REQUEST FOR JUST FLUSHING PAGE
	BEQ EMAPRT	;YES, NOTHING TO DO
	HALT		;HERE CREATE PAGES
EMAPRT:	ADD #10,P	;POP OFF THE ARGUMENTS
	CMP F,CURSPH	;DID WE CHANGE THIS SPHERE'S PAGES?
	BNE .+6		;NO DON'T WORRY ABOUT IT
	JSR PC,MAPRE1	;MAKE SURE HIS MAP GETS MODIFIED IMMEDIATELY
	JMP ERETCZ	;SUCESS
;MAKES A GENERALIZED ITEM POINTER, B CONTAINS UPT NO, C CONTAINS SPHERE NO.
;THEN DELETES UPT, BY FALLING INTO UPTDEL
SUPTDL:	ASH #10.,C		;SET THE ITEM NO. INTO THE RIGHT SPOT
	BIS F,B			;MAKE THE GIP
	BIS #GIPBIT!GIPSPR,B	;SAY THAT IT IS A GIP AND IN A SPHERE
;FALL INTO UPTDEL


;THIS IS FOR THE UPTDEL ROUTINE.
;IT DIVIDES INTO THREE MAIN PARTS
;1. DELETING ABSOLUTE PAGES (RIDICULOUSLY EASY)
;2. DELETING CORE PAGES (PAGES WITH NO FPT WITH THEM)
;3. DELETING FPT AND PFPT PAGES (RIDICULOUSLY HARD)

;THIS IS THE PLANNED STRUCTURE
;1. DECIDE IF IT IS AN ABSOLUTE PAGE (IF SO <GO >)
;2. DECIDE IF IT IS A SWAP PAGE, IF IT IS:
;	A. IS IT MOVING? IF SO <FLUSH><GO A.>
;	B. DEALLOCATE SWAP SPACE
;	C. DEALLOCATE CORE SPACE
;	D. <GO 5>
;3. IS IT A PFPT, OR ARE THERE ANY MORE REFERENCES TO THE FPT, IF SO
;	A. CHECK TO SEE IF THE GLOBAL SIZE IS GOING TO BE LARGER, IF SO:
;		i. SWAP IT OUT, WHILE WAITING
;	       ii. UPDATE THE GLOBAL SIZE
;	      iii. UPDATE FPT'S UPT POINTER
;	B. <GO 5>
;4. HERE CAUSE THE FPT TO BE DELETED WITHOUT SCREWING YOURSELF
;5. UPDATE CPT'S UPT POINTER
;6. UNLINK THE UPT
;7. DONE?
;THIS ROUTINE TAKES A GIP IN B AND DELETES THAT UPT
;IT CLOBBERS NO OTHER REGISTERS.
UPTDEL:	SAVE <B,C,D>		;SAVE THE GIP AND OTHER REG
	JSR PC,UPTPLD		;LOAD THE UPT INTO ITEM2 AFTER PUSH
	TST (B)			;IS THERE ANYTHING HERE?
	BNE UPTDL1		;YES
	CMP ITEM2,#-1		;WAS IT IN A SPHERE?
	BEQ UPTRT		;NO, WE ARE DONE
	CMP B,#<ITM2AD+SUPTS+<10*UPTLEN>>
				;THAT FOO CHECKS TO SEE IF IT IS A DATA PAGE
	BLT .+10		;IT WASN'T
	BIC #UPTDEI,-<10*UPTLEN>(B)	;THAT MAKES SURE THAT THE D=I BIT GETS CLEARED
UPTRT:	JSR PC,ITM2PO		;CLEAN OFF THE ITEM STACK
	REST <D,C,B>
	RTS PC
UPTDL1:	BIT #UPTABT,UPTAR(B)	;IS IT AN ABSOLUTE PAGE?
	BNE UPTDL2		;NO,UGH
	MOV B,D			;SAVE THE POINTER TO THE UPT
	JSR PC,UNLINK		;UNLINK THE UPT, C POINTS TO THE NEXT UPT
	MOV UPTAR(B),A		;THE AR
	BIC #UPASMS,A		;CLEAR ALL BUT THE ADRRESS
	ASH #-3,A		;GET THE PAGE NO.*2
	BIC #1,A		;MAKE SURE IT IS ON A WORD BOUNDARY
	MOV CST(A),A		;THE CORE STORAGE TABLE FOR THIS PAGE
	BIC #CSTCOM,A		;CLEAR ALL BUT THE CPT OFFSET MASK
	MOV C,CPT+CPTUPP(A)	;SET IN THE NEW CPT POINTER
	MOV #UPTLEN/2,B		;GET THE LENGTH OF THE UPT IN WORDS
	CLR (D)+		;CLEAR THE WORDS OF THE UPT
	SOB B,.-2
	BR UPTRT
UPTDL2:	HALT
;THIS IS A ROUTINE THAT WILL LINK A UPT OUT OF
;THE CIRCULAR LIST OF UPT'S, AND IF THERE IS ONLY ONE
;LEFT IT WILL UNCIRCULARIZE THE LIST.  IF THERE IS NO
;CIRCULAR LIST, IT RETURNS SETTING Z. ELSE CLEARS Z.
;IT TAKES A GENERALIZED ITEM POINTER IN B TO THE UPT.
;IT RETURNS IN C WHAT THE UPT IT UNLINKED USED TO POINT TO
;IT WILL ALSO UPDATE ALL THE UPMSSW AND UPMLSW FIELDS OF ALL THE UPTS
UNLINK:	MOV B,F			;SAVE THE POINTER
	BIT #GIPBIT,B		;IS IT A GIP
	BNE .+4			;YES
	BPT
	JSR PC,UPTPLD		;LOAD THE UPT INTO ITEM2
	MOV UPTCLP(B),B		;GET THE NEXT POINTER
	MOV B,C			;SAVE THIS FOR LATER
	BNE UNLNK1		;THERE IS A CIRCULAR LIST
	JSR PC,ITM2PO		;POP ITEM2 PUSHED BY UPTPLD
	CLR C			;CLEAR THE FORWARD POINTER
	RTS PC
UNLNK1:	JSR PC,UPTLD		;LOAD THE NEXT UPT
	CMP UPTCLP(B),F		;DOES THIS POINT TO THE FIRST UPT
	BEQ UNLNK2		;YES
	MOV UPTCLP(B),B		;GET THE NEXT POINTER
	BNE UNLNK1		;THERE IS A NEXT POINTER
	BPT
UNLNK2:	MOV C,UPTCLP(B)		;UPDATE THE UPT CIRCULAR POINTER
	MOV C,B			;CHECK THAT THERE ARE MORE THAN ONE
	JSR PC,UPTLD		;LOAD THE NEW FORWARD POINTER
	CMP C,UPTCLP(B)		;DOES THE UPT POINT TO ITSELF?
	BNE .+6			;NOPE
	CLR UPTCLP(B)		;NOW IT DOESN'T
	MOV C,B			;THE POINTER TO THE NEXT C-LIST ENTRY
	JSR PC,SWPCAL		;CALCULATE THE SWAP FIELDS
	JSR PC,ITM2PO		;POP THE ITEM STACK PUSHED BY UPTPLD
	SEZ			;SET FLAG
	RTS PC
;THIS ROUTINE TAKES A POINTER TO A UPT IN B, WHICH IS LOADED, IT THEN CACULATES
;THE SWAP START AND SWAP LENGTH FIELDS AND THEN PUTS THESE INTO ALL THE UPTS IN
;THE CIRCULAR LIST.
SWPCAL:	MOV B,F		;SAVE THE POINTER TO THE FIRST ONE
	JSR PC,UPTPLD	;LOAD THE UPT
	TST UPTCLP(B)	;IS THERE A CIRCULAR LIST
	BEQ SWPCL1	;NO
	SAVE <#0,#10>	;THE ORIGINAL END AND START FIELD
SWPCA2:	MOV UPTDR(B),C	;THE DESCRIPTOR
	MOV C,D		;COPY IT
	BIC #UPMSRE,C	;CLEAR ALL BUT THE START OF REFERENCED ENTRY
	SWAB C		;GET THE START FIELD
	BIC #UPMLRE,D	;CLEAR ALL BUT THE LENGTH FIELD
	ASH #-4,D	;GET THE LENGTH FIELD INTO THE LOW BITS IN BYTE
	SWAB D		;GET THE LENGTH FIELD
	ADD C,D		;GET THE END OF THE AREA
	CMP C,(P)	;THE OLD START FIELD
	BGE .+4
	MOV C,(P)	;NEW START FIELD
	CMP D,2(P)	;OLD END FIELD
	BLE .+4
	MOV D,2(P)	;NEW END FIELD
	MOV UPTCLP(B),B	;POINTER TO THE NEXT UPT
	CMP B,F		;HAVE WE LINKED THROUGH YET
	BEQ SWPCA3	;YES
	JSR PC,UPTLD	;LOAD IT UP
	BR SWPCA2
SWPCA3:	MOV 2(P),D	;THE LARGEST END FIELD
	MOV (P),C	;THE SMALLEST START FIELD
	SUB C,D		;THE SWAP AREA LENGTH FIELD
	SWAB D		;GET THE LENGTH FIELD INTO TOP BYTE
	ASH #4,D	;PUT IT IN THE RIGHT PLACE
	BIS D,C		;THE TOTAL MASK
SWPCA4:	JSR PC,UPTLD	;THE ORIGINAL UPT
	BIC #70007,UPTAR(B)	;CLEAR THE SWAP FIELDS
	BIS C,UPTAR(B)	;SET THE NEW FIELDS
	MOV UPTCLP(B),B	;GET THE NEXT UPT
	CMP B,F		;IS THIS THE ORIGINAL
	BNE SWPCA4	;NOPE, GET THE NEXT UPT
	JSR PC,ITM2PO	;POP THE ORIGINAL UPTPLD
	RTS PC
SWPCL1:	MOV UPTDR(B),C	;THE AR
	MOV C,D		;COPY IT
	BIC #70007,UPTAR(B)	;CLEAR THE SWAP FIELDS
	BIC #UPMSRE,D	;CLEAR ALL BUT THE START FIELD
	SWAB D		;THE START OF THE REFERENCED ENTRY
	BIC #UPMLRE,C	;CLEAR ALL BUT LENGTH FIELD
	BIS C,D		;MAKE THE NEW TOTAL SWAP MASK
	BIS D,UPTAR(B)	;SET IT IN
	JSR PC,ITM2PO	;POP THE UPT
	RTS PC
	