(SETQ GC-OVERFLOW '(LAMBDA (USELESS) '(T)))

(and (setq romcode '(

(&	2500 Resident "Monitor" )
(&	The code includes the display programs for both the text and)
(&	vector display, as well as a loader allowing for loading of user)
(&	programs)


	(start 0)

(& A pushbutton on the proccessor does a hardware jump to zero so location)
(& zero contains a jump to the initialization routines)

	(jump init)

(& loader)

(& The loader starts at location 100 )
(& The format for input code is -)
(& c1 /  c1 c1 c1 / c2 c2 c2  / c2 c2 c2 / c3 c3 c3 / c3 c3 c3 )
(& i e sixteen bit words are formed by grouping together)
(& three characters, four from the first character, and six from)
(& the other two - always taking the least significant bits)
(& The loader loads in blocks- The format for a block is-)
(& First word		120116		flag-word to engage loader)
(& Second word		nnnnnn		load type 0 is jump to display program)
(&					1 control memory load)
(&					2 main memory load)
(& Third word		aaaaaa		Block starting address)
(& Fourth word		cccccc		Number of words to be loaded)
(& Rest of the block is data)
		
	(CALL 0 WD)
	(CALL 1 ADR)
	(CALL 2 loader-CNT)
	(CALL 3 CHK)
	(CALL 4 TYP)
	(CALL 124 OK-CHR)
	(CALL 116 LOSE-CHR)


MEM-LOOP	(PUSHJ	GET-WD)
		(WRITEI	ADR WD)
		(BPL	NOT-FONT & LOAD 8 BITS PER WORD IN FONT MEMORY)
		(ROT	WD 8.)
		(WRITEI ADR WD)
		(DEC	loader-CNT)
NOT-FONT	(DEC	loader-CNT)
		(BNE	MEM-LOOP)
		(JUMP	END)
CRM-LOOP	(PUSHJ	GET-WD)
		(NOP	ADR)
		(CWRITE WD )
		(INC	ADR)
		(DEC	loader-CNT)
		(BNE	CRM-LOOP)
END		(PUSHJ	GET-WD)
		(GET	CHK CHK & LOOK AT CHECK SUM)
		(BNE	LOSE)
		(LOD	7)
		(OK-CHR)
CONFIRM		(PUT	7 UART)
		(NOP	7 	& UARTS ARE SLOW)
		(NOP	7	& VERY SLOW)
		(NOP	7 	& VERY VERY SLOW)
		(JUMP	loader-START)
GET-WD		(PUSHJ	CHR-IN)
		(PUSHJ	CHR-IN)
		(PUSHJ	CHR-IN)
		(ADD	CHK WD)
		(POPJ)
CHR-IN		(DIS	INTS 2 )
		(JUMP	CHR-IN)
		(NOP)
		(GET	5 UART)
		(ANDI	WD WD )
		(1777)
		(ROT	WD -6.)
		(ANDI	5 5 )
		(77)
		(IOR	WD 5)
		(POPJ)

loader-START	(SUB	WD WD)
WAIT-FLAG	(PUSHJ 	CHR-IN)
		(GET	WD WD 	& TO SEE IT)
		(CMPI	WD)
		(120116)
		(BNE	WAIT-FLAG & WAIT FOR FLAG)
		(SUB	CHK CHK)
		(PUT	CHK DSR	& TURN OFF TV)
		(PUSHJ	GET-WD)
		(GET	TYP WD)
		(BEQ	init	& exit to the montor)
		(PUSHJ	GET-WD)
		(GET 	ADR WD  & START ADDRESS)
		(PUSHJ	GET-WD)
		(GET 	loader-CNT WD & NUMBER OF WORDS)
		(DEC	TYP)
		(BEQ	CRM-LOOP & TYPE 1 IS LOAD CRM)
		(DEC	TYP)
		(BEQ	MEM-LOOP & TYPE 2 IS LOAD MEM)
LOSE		(LOD	7)
		(LOSE-CHR)
		(JUMP 	CONFIRM)
		(jump	loader-start	& this is at location 100 )

(&  INPUT FORMAT)
(&    NORMALLY ALL CHARACTERS COMING IN AT THE INTERFACE PORT ARE DISPLAYED ON THE)
(&  TEXT DISPLAY)
(&    GRAPHICS COMMANDS ARE PREFACED BY AN ESCAPE CHARACTER 33 OCTAL)

(&  SPECIAL CHARACTERS)

	(CALL 000  NUL-CHR		& NULL)
	(CALL 007  BEL-CHR		& FLASH SCREEN)
	(CALL 010  BS-CHR		& BACK SPACE)
	(CALL 011  TAB-CHR		& TAB MOD 8)
	(CALL 012  LF-CHR		& LINEFEED)
	(CALL 013  DOWN-CHR		& CURSOR DOWN)
	(CALL 014  TV-CHR		& SETS TV TO GREEN CHRS ON BLACK)
	(CALL 015  CR-CHR		& CARRIAGE RETURN)
	(CALL 016  RESET-CHR		& RESETS TIME TO ZERO)
	(CALL 021  QUOTE-CHR		& NEXT CHR HAS NO SPECIAL MEANING)
	(CALL 030  RT-CHR		& CURSOR RIGHT)
	(CALL 031  LEFT-CHR		& CURSOR LEFT)
	(CALL 032  UP-CHR		& CURSOR UP)
	(CALL 033  FLAG-CHR		& ESCAPE TO COMMAND MODE)
	(CALL 034  HM-DN-CHR		& CURSOR TO LOWER RIGHT CORNER)
	(CALL 035  HM-UP-CHR		& CURSOR TO UPPER RIGHT CORNER)
	(CALL 036  CLR-EOL		& CLEAR FROM CURSOR TO END OF CURRENT LINE)
	(CALL 037  CLR-EOF		& CLEAR TO END OF PAGE)
	(CALL 177  DEL-CHR		& DELETE IS JUST LIKE NULL)





(&   CHARACTERS BETWIXT 100 AND 137 OCTAL INCLUSIVE ARIVING AFTER AN ESCAPE WILL)
(&   BE EXPECTED IN GROUPS OF THREE THE 5 LEAST SIGNIFICANT BITS OF THESE 3 CHRS WILL)
(&   BE CONS UP INTO A 15 BIT DISPLAY LIST INSTRUCTION  LAST CHR IS LEAST SIGNIFICANT)
(&   THIS DISPLAY INSTRUCTION IS ADDED TO THE TOP OF THE DISPLAY LIST)

(&  OP CODES ARE AS FOLLOWS)

(&   /000 /00X /XXX /XXX /XXX 		NOP)
(&   /000 /100 /0XX /XXX /XXX 		HOME)
(&   /000 /100 /1XX /XXX /000 		PENDONW)
(&   /000 /100 /1XX /XXX /001 		SMALL DOT)
(&   /000 /100 /1XX /XXX /010 		DOT)
(&   /000 /100 /1XX /XXX /011 		WIDE DOT)
(&   /000 /100 /1XX /XXX /100 		DASH)
(&   /000 /100 /1XX /XXX /101 		DASH DOT)
(&   /000 /100 /1XX /XXX /110 		WIDE DASH)
(&   /000 /100 /1XX /XXX /111 		PENDOWN)
(&   /000 /101 /0XX /XXX /XX1  		SHOWTURTLE)
(&   /000 /101 /0XX /XXX /000 		HIDETURTLE)
(&   /000 /110 /0XX /XXX /XXX 		BLINK)
(&   /000 /110 /1XX /XXX /XX0 		WRAP)
(&   /000 /110 /1XX /XXX /XX1 		BOUNCE)
(&   /000 /111 /0XX /XXX /XXX 		RESET)
(&   /000 /111 /1XX /XXX /XXX 		NOP)
(&   /001 /0DD /DDD /DDD /DDD 		FORWARD   DISTANCE)
(&   /001 /1AA /AAA /AAA /AAA 		RIGHT ANGLE)
(&   /010 /0HH /HHH /HHH /HHH 		SETHEADING   HEADING)
(&   /010 /1SS /SSS /SSS /SSS 		MOVE   SPEED)
(&   /011 /0SS /SSS /SSS /SSS 		SPIN   SPEED)
(&   /100 /0CC /CCC /CCC /CCC 		SETXY XCOR , YCOR IN NEXT WORD)
(&   /100 /1DD /DDD /DDD /DDD 		DELTAXY DX , DY IN NEXT WORD)
(&   /101 /000 /000 /000 /000 		CLEARSCREEN)
(&   /101 /01N /NNN /NNN /NNN 		REMOVE -N INSTRUCTIONS FROM THE DISPLAY LIST)
(&   /111 /AAA /AAA /AAA /AAA		jump a)
(&    other op codes are errors)

(& GRAHIC REGISTER ALLOCATION)

	(CALL 2  XPOS 		& LSB'S OF X POSITION)
	(CALL 3  YPOS		& LSB'S OF Y POSITION)
	(CALL 4  SIN 		& SINE OF HEADING)
	(CALL 5  COS 		& COSE OF HEADING)
	(CALL 6  HEADING 	& HEADING OF TURTLE)
	(CALL 7  PC 		& POINTER TO DISPLAY LIST INSTRUTION BEING EXECUTED)

(&  SCRATCH PAD ALLOCATION)

	(CALL 40  ISAV-1	& FOR SAVING REGS DURING INTERRUPTS)
	(CALL 41  ISAV-2)
	(CALL 42  ISAV-3)
	(CALL 43  ISAV-4)
	(CALL 44  ISAV-5)
	(CALL 45  SCRATCH	& NEVER TRUST A SUBR WITH THIS ONE)
	(CALL 46  TOP-LINE	& TOP LINE ON SCREEN)
	(CALL 47  SCR-VALUE	& SCROLL)
	(CALL 50  BACK-SCRATCH	& NOT FOR SCRATCHING BACKS BUT FOR BACK'S SCRATCHING)
	(CALL 51  CONS-CELL		& FOR CONSING UP DISPAY INSTRUCTIONS)
	(CALL 52  READ-STATE		& DEPENDS ON WHAT CHARS HAVE COME IN)
	(CALL 54  MOVE-PEN		& STOREING PEN-STATE WHILE IN MOVE)
;
;
	(CALL 57  SPIN-ANGLE		& LIKE CLOCK MODE 360)
	(CALL 60  WRAP-MODE		& ONE IF TURTLE SHOULD WRAP ELSE ZERO)
	(CALL 61  SYNCH-FLAG		& SYMAPHORE TO SYNCHRONIZE REFRESH AND CLOCK)
	(CALL 62  CLOCK 		& TIME INCREMENTED EVERY CLOCK CYCLE)
	(CALL 63  IN-BUFFER 		& COMMUNICATIONS LINK INPUT BUFFER POINTER)
	(CALL 64  OUT-BUFFER  		& COMMUNICATIONS LINK OUTPUT BUFFER)
	(CALL 65  DISPLAY-TOP 		& TOP OF DISPLAY LIST)
	(CALL 66  DSR-STATE 		& COPY OF DISPLAY STATUS REGISTER)
	(CALL 67  TURTLE-STATE 		& ZERO IF TURTLE IS HIDDEN ELSE MINUS ONE)
	(CALL 70  LINE			& start address of current text line displayed)
	(CALL 71  CRSR-LINE		& start address of text line with cursor)
	(CALL 72  CRSR-COL		& text column 0-71 of cursor)
	(CALL 73  CRSR-REPL		& character that cursor is sitting on)
	(call 74  isav-6)
	(call 75  isav-7)
	(call 77  cursor-kludge		& flag to prevent cursur update during scroll)

;
;
;
	(CALL 76  FLASH-TIME		& counter for screen flash for control-g)
;

(&  MEMORY ALLOCATION)

	(CALL 0		IN-BUFFER-START)
	(CALL 170 	DISPLAY-LIST-START)
	(CALL 5710 	TEXT-START)
	(CALL 7777	TEXT-END)
(& INTERUPT SERVICE ROUTINE)


SERV-INTERUPT	(PUT	0 ISAV-1	& IT IS ORE BLESSED TO SERVE THAN TO RECIEVE)
		(PUT	1 ISAV-2)
		(DIS	INTS 7)
		(ERROR			& INTERUPT WENT AWAY)
		(JUMP	TV-LINE		& TEXTDISPLAY IS 1)
		(JUMP	SERV-IN		& CHARACTER COMING IN ON INTERFACE)
		(JUMP	TV-LINE		& TV-LINE HAS PRIORITY)
		(JUMP	SERV-CLOCK	& 60TH OF A SEC INTERUPT)
		(JUMP	TV-LINE		& TV-LINE HAS PRIORITY)
		(JUMP	SERV-CLOCK	& CLOCK HAS PRIORITY)
		(JUMP	TV-LINE		& THOU SHALT HAVE NO OTHER BEFOR HIM)

(& INITIALIZE ALL)

START		(PUSHJ	INIT		& WE HOPE THIS IS A NOP)
		(ERROR			& CAUSE THIS MEANS STACK UNDERFLOW)
INIT		(SUB	0 0)
		(put	0 flash-time	& lest the screen flash on power up)
		(put 0 cursor-kludge)
		(PUT	0 CONS-CELL)
		(PUT	0 READ-STATE)
		(PUT	0 SPIN-ANGLE)
		(PUT	0 CLOCK)
		(PUT	0 SYNCH-FLAG)
		(PUT	0 IN-BUFFER)
		(PUT	0 WRAP-MODE)
		(INC	0)
		(PUT	0 TURTLE-STATE)
		(NOR	0 0)
		(PUT	0 OUT-BUFFER)
		(LOD	0)
		(DISPLAY-LIST-START)
		(PUT	0 DISPLAY-TOP)
		(LOD	0)
		(255.)
		(PUT	0 XCOR)
		(PUT	0 YCOR)
		(PUSHJ	TV-INIT)
NEXT-TIME	(PUSHJ	CENTER)

(&  MAIN LOOP OF THE DISPLAY PROGRAM)


WAIT		(PUSHJ  CHECK-FLAG)
		(pushj 	check-ints)
		(GET	0 IN-BUFFER	& CHECK IF THERE ARE CHARACTERS IN THE BUFFER)
		(NOP	0			& GET DOESN/'T SET CONDITIONALS)
		(BNE	SERV-IN-BUFFER		& IF NOT WAIT SOME MORE)
		(GET	0 SYNCH-FLAG		& HAS A 60 CYCLE INTERUPT COME ?)
		(NOP	0			& GET DOESN/'T SET CONDITIONALS)
		(BEQ	WAIT			& IF SO REFRESH VECTORS)
		(JUMP	REFRESH)

SERV-IN-BUFFER	(DEC	0			& GET A CHAR FROM FIFO)
		(PUT	0 IN-BUFFER		& COUNT OF STUFF)
		(ADDI	PC 0)
		(IN-BUFFER-START		& THE END OF THE BUFFER)
MOVE-FIFO	(READ	PC 2			& MOVE DOWN THE BUFFER)
		(NOP	0			& **** JUUST TEMP)
		(WRITED	PC 1)
		(CMPI	PC)
		(- IN-BUFFER-START 1)
		(BEQ	GOBBLER			& GOBBLES DOWN A CHARACTER)
		(GET	1 2)
		(JUMP	MOVE-FIFO)


GOBBLER		(GET	1 READ-STATE		& HAVE WE JUST GOTTEN A FLAG?)
		(NOP	1			& GET DOESN/'T SET CONDITIONALS)
		(BMI	QUOTED		& NO SPECIAL MEANING)
		(BEQ	TEXT-ADD		& IF NOT TEXT-ADD CHECK FOR FLAG)
		(GET	3 CONS-CELL		& GET PREVIOUS WORK)
		(ROT	3 11.)
		(ANDI	0 2			& ADD IN 5 BITS)
		(37)
		(ADD	0 3)
		(PUT	0 CONS-CELL		& SAVE IT)
		(DEC	1			& CHANGE STATE)
		(PUT	1 READ-STATE)
		(BNE	WAIT			& MORE TO COME)
		(andi	1 0)
		(70000				& check for clearscreen)
		(cmpi	1)
		(50000)
		(bne 	not-clear-screen)
		(pushj	clear-display)
		(jump	wait)
not-clear-screen(GET	3 DISPLAY-TOP		& ADD TO DISPLAY LIST)
		(WRITEI	3 0)
		(PUT	3 DISPLAY-TOP)
		(JUMP	WAIT)

QUOTED		(SUB	1 1			& TURN OFF QUOTE MODE)
		(PUT	1 READ-STATE)
		(PUSHJ	TV-QUOTE)
		(JUMP	WAIT)

TEXT-ADD	(CMPI	2			& CHECK FOR QOTE CHR)
		(QUOTE-CHR)
		(BEQ	SET-QUOTE)
		(CMPI	2			& CHECK FOR ALT MADE CHAR)
		(FLAG-CHR)
		(BNE	TEXT-CHAR			& FOR TEXT DISPLAY)
		(PUT	1 CONS-CELL		& IF SO CLEAR CONS-CELL)
		(LOD	0			& MAKE READ-STATE 3)
		(3)
		(PUT	0 READ-STATE)
		(JUMP	WAIT)

SET-QUOTE	(LOD	0			& TURN ON QUOTE MODE FOR ONE CHR)
		(-1)
		(PUT	0 READ-STATE)
		(JUMP	WAIT)

TEXT-CHAR	(PUSHJ  TV-CHAR)
		(JUMP	WAIT)


CHECK-FLAG	(DIS	FLAGS 3)

POP-PLACE	(POPJ)
		(JUMP	SERV-KEY	& KEYBOARD IS 1)
		(JUMP	SERV-OUT	& OUTPUT TO INTERFACE IS 2)
		(PUSHJ	SERV-OUT	& DO THEM BOTH)
		(JUMP	SERV-KEY)

SERV-CLOCK	(GET	0 CLOCK		& INCREMENT CLOCK)
		(INC	0)
		(PUT	0 CLOCK)
		(GET	0 SPIN-ANGLE	& UPDATE SPIN-ANGLE)
		(INC	0)
		(LOD	1)
		(* 360. 100)
		(PUSHJ	TOO-LOW		& NORMALIZE)
		(PUT	0 SPIN-ANGLE)
		(INC	0		& TO GARRANTEE A NON ZERO-NUMBER)
		(PUT	0 SYNCH-FLAG	& AND LET REFRESH START IF WAITING)
		(pushj	check-flag	& so they get checked at at least 60 hurts)
		(JUMP	TV-PAGE)


SERV-IN		(GET	0 IN-BUFFER	& PUT IT IN FIFO)
		(ADDI	1 0)
		(IN-BUFFER-START)
		(INC	0)
		(PUT	0 IN-BUFFER)
		(GET	0 UART)
		(ANDI	0 0		& UART GIVES RANDOM HIGH BITS)
		(377)
		(WRITE	1 0		& UARTS ARE REALLY SLOW)
		(GET	0 ISAV-1)
		(GET	1 ISAV-2)
		(POPJ			& SO THIS CAN NOT BE A JUMP CHECK-INTS)


SERV-KEY	(GET	0 OUT-BUFFER	& ADD BUFFER IS JUST ONE LONG)
		(NOP	0		& GET DOESN/'T SET CONDITIONALS)
		(BPL	pop-place	& BUT YOU CAN TYPE FASTER THAN 60 CPS)
		(GET	0 KEY		& BUT NOT FASTER THAN 120 CPS)
		(ANDI	0 0		& KEYBOARD GIVES RANDOM HIGH BITS)
		(377			& GIVE UNTO OUTPUT AS INPUT HAS GIVEN TO YOU)
		(PUT	0 OUT-BUFFER)
		(POPJ)



SERV-OUT	(GET	0 OUT-BUFFER)
		(NOP	0		& GET DOESN/'T SET CONDITIONALS)
		(BMI	pop-place	& IS THERE SOMETHING TO SEND OUT?)
CHOUT		(PUT	0 UART		& SEND OUT THE CHARACTER)
		(NOP	0		& UARTS ARE SLOW)
		(NOP	0		& VERY SLOW)
		(NOP	0		& VERY VERY SLOW)
		(LOD	1		& MAKE A NOTE THAT THE DEED WAS DONE)
		(-1)
		(PUT	1 OUT-BUFFER	& THIS IS A NEGATIVE NUMBER)
		(popj)

(&  REFRESH - ONCE EVERY 60TH OF A SEC)

REFRESH		(LOD	PC)
		(DISPLAY-LIST-START)
		(PUSHJ	CENTER)
		(PUT	HEADING SYNCH-FLAG	& A HANDY ZERO)
		(GET	XPOS 0)
		(GET	YPOS 0)
NEXT		(READI	PC 0		& INC POINTER AND GET INSTUCTION)
		(GET	1 DISPLAY-TOP)
		(CMP	1 PC		& ARE WE DONE)
		(BMI	TURTLE		& YES DRAW TURTLE)
DONT-LOOK-NOW	(PUSHJ	DISPATCH	& SO THAT ALL IS SUBR/'S)
		(JUMP	NEXT)

TURTLE		(PUSHJ	PEN-DOWN	& SHOULD BE DOWN FOR NEXT REFRESH)
		(GET	1 TURTLE-STATE	& THIS DRAWS A TRIANGULAR TURTLE)
		(NOP	1			& GET DOESN/'T SET CONDITIONALS)
		(BEQ	NEXT-TIME		& IF IT IS SHOWING)
		(LOD	PC)
		(TURTLE-PROG)
T-LOOP		(INC	PC)
		(CREAD	0)
		(BEQ	NEXT-TIME	& LIST ENDS WITH A 0)
		(PUSHJ	DISPATCH	& EXECUTE IT)
TURTLE-PROG	(JUMP	T-LOOP		& TAG SHOULD BE HERE)
		(17646			& LT 90.)
		(10000 7.		& FD 7.)
		(14000 135.		& RT 135.)
		(10000 10.		& FD 10.)
		(14000 90.		& RT 90.)
		(10000 10.		& FD 10.)
		(14000 135.		& RT 135.)
		(10000 7.		& FD 7.)
		(0			& END-TAG)

DISPATCH	(T ROT	0 -1		& MUST LOOK AT THE MOST SIG  BITS)
		(DIS	BUS 17		& DISPLAY LIST OP CODES)
		(POPJ			& 0)
		(JUMP	SETXY		& 8)
		(JUMP	SETHEADING	& 4)
		(POPJ			& 12)
		(JUMP	FORWARD		& 2)
		(JUMP	CLEAR-DISPLAY	& 10)
		(JUMP	SPIN		& 6)
		(jump	jump-out	& 14)
		(JUMP	SPECIAL		& 1)
		(JUMP	DELTAXY		& 9)
		(JUMP	MOVE		& 5)
		(POPJ			& 13)
		(JUMP	RIGHT		& 3)
		(POPJ			& 11)
		(popj			& 7)
		(jump	jump-out	& 15)

SPECIAL		(T ROT	0 -5		& LOOK AT NEXT MOST SIG BITS)
		(DIS	BUS 7		& SPECIAL DISPLAY LIST OP CODES)
		(JUMP	HOME		& 0)
		(JUMP	BLINK		& 4)
		(JUMP	SET-TURTLE	& 2)
		(JUMP	INIT		& 6)
		(JUMP	SET-PEN		& 1)
		(JUMP	SET-WRAP	& 5)
		(popj			& 3)
		(POPJ			& 7)

(&  DISPLAY LIST INSTRUCTIONS)
(&  SPECIAL INSTRUNTIONS FIRST)

CENTER		(PUSHJ	T-PENUP)
HOME		(LOD	SIN		& CENTER OF SCREEN)
		(255.)
		(GET	COS SIN)
		(SUB	6 6		& SO STXY WILL DO A SETHEADING 0)
		(PUSHJ	STXY)
		(JUMP	RESTORE-DSR)

PEN-DOWN	(SUB	0 0)
SET-PEN		(PUSHJ	SET-DSR-PEN)
		(PUT	0 DSR-STATE)
		(JUMP CHECK-INTS	& SHOULD BE POPJI)


SET-TURTLE	(ANDI	0 0		& ONE TO SHOW TURTLE 0 TO HIDE HER)
		(1)
		(PUT	0 TURTLE-STATE)
		(JUMP CHECK-INTS	& SHOULD BE POPJI)

SET-WRAP	(ANDI	0 0		& ONE SHE WRAPS ZERO SHE DON/'T)
		(1)
		(PUT	0 WRAP-MODE)
		(JUMP CHECK-INTS	& SHOULD BE POPJI)


CLEAR-DISPLAY	(PUSHJ	GETARG		& FOR CLEARING DISPLAY LIST)
		(NOP	0		& NEGATIVE ARG MEANS ITS A DELTA)
		(BPL	SET-TOP		& POSITIVE VAULES BECOME NEW LENGTH)
		(GET	1 DISPLAY-TOP)
		(ADD	0 1)
		(JUMP	PUT-TOP)
SET-TOP		(ADDI	0 0)
		(DISPLAY-LIST-START)
PUT-TOP		(PUT	0 DISPLAY-TOP)
		(JUMP CHECK-INTS	& SHOULD BE POPJI)
jump-out	(nop	0)
		(get	12 0		& indirect jump instruction)
BLINK		(GET	1 CLOCK		& BLINKS AT ABOUT TWICE A SEC)
		(ROT	1 5)
		(BMI	PEN-DOWN)
PEN-UP		(LOD 0)
		(7)
		(JUMP	SET-PEN)

FORWARD		(PUSHJ	GETARG		& GET SIGNED ARG)
FD-BK		(NOP	0)
		(BPL	FD		& BUT UNLESS IT IS POSITIVE)
		(PUSHJ	INVERT-STUFF	& INVERT SIN, COS AND DISTANCE)
		(PUSHJ	FD		& DID YOU NOTICE THE TRICKY SUBROUTINE CALL?)
INVERT-STUFF	(PUT 	0 SCRATCH	& SAVE THE ARG)
		(addi	0 heading		& UN DO IT WITH THE SAME CODE)
		(180.)
		(pushj	seth		& turn around and go back)
		(get 	0 scratch	& restore the arg)
		(SUBI	0 0)
		(0)
		(jump	check-ints) 
FD		(ADD	0 0		& SHIFT)
		(SUBI	0 0		& COMPLEMENT)
		(1)
		(PUT	0 XR)
		(NOP	0		& MUST KEEP IT ON THE BUS)
CONTINUE-FD	(MAGIC			& MAGIC VECTOR INSTRUCTION)
		(ADD	3 5		& AND ITS HELPER)
		(SUB 3 5		& **** hardware loss ****)
		(DIS	STARS 1		& SKIP IF NOT  WRAP)
		(JUMP	OFF-SCREEN)
		(JUMP CHECK-INTS	& SHOULD BE POPJI)
OFF-SCREEN	(GET	0 XCOR		& SO WE CAN SEE IF IT WRAPS AGAIN)
		(ANDI	0 0		& IT SHOULD BE JUST NINE BITS)
		(777)
		(PUT	0 XCOR)
		(GET	0 YCOR)
		(ANDI	0 0)
		(777)
		(PUT	0 YCOR)
		(GET	0 WRAP-MODE	& WHAT MADE ARE WE IN?)
		(NOP	0			& GET DOESN/'T SET CONDITIONALS)
		(BNE	CHECK-INTS	& 1 IS FALL MODE)
WRAP		(PUSHJ  T-PENUP		& WRAP IS ON WHENN SET)
		(LOD	0)
		(100			& WRAP DELAY JUST A GUESS)
WRAP-LOOP	(get	1 in-buffer	& if there are a lot of characters in the buffer)
		(cmpi	1		& then abort display refresh)
		(100			& by faking out the pc)
		(bpl	not-too-full	& less than 100 is ok)
		(get	1 display-top)
		(dec	1)
		(get	pc 1		& this will do funny things to the screen)
		(jump	wait-no-more	& but its only temporay)
not-too-full	(PUSHJ	CHECK-INTS	& KILL ENOUGH TIME TO GET AROUND)
		(DEC	0)
		(BPL	WRAP-LOOP)
wait-no-more	(PUSHJ	RESTORE-DSR)
		(JUMP	CONTINUE-FD	& WE ALL SHOULD)

RIGHT		(PUSHJ	GETARG		& GET SIGNED ARGUMENT)
RT 		(ADD	0 HEADING	& JUMP HERE IF YOU HAVE YOU ARG IN ZERO)
		(JUMP	SETH)

DELTAXY		(PUSHJ	GETARG		& DELTA X IS IN WORD)
		(GET	SIN 0)
		(PUSHJ	FETCH-ARG	& DELTA Y IS NEXT IN LINE)
		(NOP	1)
		(BEQ	CHECK-INTS	& BUT MAY NOT HAVE ARRIVED YET)
		(GET	COS 0)
		(JUMP	DELXY		& DO THE DEED)

SETXY		(PUSHJ	GETARG		& FIRST ARG IN THIS WORD)
		(ADDI	SIN 0		& NEW  X STORED IN SIN)
		(377			& IN PEOPLE CORDIATES)
		(PUSHJ	FETCH-ARG	& A TWO WORD INSTRUCTION)
		(NOP	1)
		(BEQ 	CHECK-INTS	& OTHER ARG NOT THERE YET)
		(ADDI	COS 0		& NEW Y STORED IN COS)
		(377)
STXY		(GET	0 XCOR		& JUMP HERE IF ARGS ARE IN SIN AND COS)
		(ANDI	0 0		& THOW SHALT NOT BE RANDOM)
		(777			& IN THINE HIGHEST PLACES)
		(GET	1 YCOR		& LEST THY LOWEST BITS BE RANDOM LIKEWISE)
		(ANDI	1 1)
		(777)
		(SUB	SIN  0		& DETLA X)
		(SUB	COS  1		& DELTA Y)
DELXY		(ROT	SIN 9.		& JUMP HERE WITH ARGS IN SIN AND COS)
		(ROT	COS 9.)
		(LOD	0		& ALWAYS GOES 400 STEPS)
		(400			& THERE IS ROOM FOR IMPROVEMENT HERE)
		(PUSHJ	FD)
		(JUMP	TRIG-LOOKUP	& RESTORE SIN AND COS)


SETHEADING	(PUSHJ	GETARG		& LEAVE SIGNED ARGUMENT IN ZERO)
SETH		(PUSHJ	NORMALIZE	& PUSHJ TO HERE IF ARG IS ALREADY IN ZERO)
		(GET	HEADING 0 	& BEND DOWN AND TOUCH YOUR TOES)
		(JUMP	TRIG-LOOKUP	& GET SIN AND COS )


SPIN		(PUSHJ	GETARG)
		(GET	1 SPIN-ANGLE	& JUST A TIME DEPENDENT RIGHT)
		(PUSHJ	POS-MULTIPLY)
		(JUMP	RT 		& NOTH/'N TO IT)


MOVE		(PUT	0 SCRATCH)
		(PUSHJ	T-PENUP	)
		(GET	1 DSR-STATE	& OLD STATE IS)
		(PUT	1 MOVE-PEN	& WHAT TO RESTORE THE PEN TO)
		(PUT	0 DSR-STATE	& SO PEN WON'T COME UP WHILE WRAPING)
		(GET	0 SCRATCH)
		(PUSHJ	GETARG)
		(GET	1 CLOCK)
		(PUSHJ	POS-MULTIPLY	& THIS IS SIMPLE BUT HAS A BUG)
		(GET 	0 1		& TURTLE WILL JERK WHILE MOVING ON AN ANGLE)
		(PUSHJ	FD-BK)
		(GET	0 MOVE-PEN)
		(PUT	0 DSR-STATE	& RESTORE)
		(JUMP	PUT-DSR)
		

(&  UTILITY SUBRS)

FETCH-ARG	(GET	1 DISPLAY-TOP	& GET ARG FROM NEXT WORD IN DISPLAY LIST)
		(SUB	1 PC		& LEAVE EQ FLAG SET IF ARG NOT THERE)
		(READI	PC 0)
		(POPJ)

multiply	(PUT	2 SCRATCH	& POS NUM IN 1 TIMES NUM IN 0 TO 0)
		(LOD	2)
		(-15.)
		(PUT	2 XR		& WE USE THE IR TO ITERATE 16 TIMES)

		(NOP	0		& IF NUMBER IN ZERO IS NEG)
		(BPL	BOTH-POS)
		(subi	0 0		& completment the argument)
		(0)
		(PUSHJ	BOTH-POS	& MULTIPLY)
		(SUBI	1 1		& COMPLEMENT THE SHORT ANSWER)
		(0)
		(POPJ)

BOTH-POS	(SUB	2 2		& RESULT WILL APPEAR HERE)
POS-MULT-LOOP	(ADD	2 2		& CLEARS THE CARRY)
		(XADD	1 1		& REG ONE MUST BE POSITIVE)
		(bcc    no-add)
		(ADD 2 0		& REG ZERO CAN BE EITHER)
		(IFC INC 1		& TO PUT THE HIGH BITS IN 1)
no-add		(BXSI	POS-MULT-LOOP)
		(popj)

pos-multiply	(nop	0)
		(bmi	invert		& must hack if negative)
		(pushj	multiply)
cons-up		(ROT	2 6.		& GET NUMBER DIVED BY 64. IN 0)
		(ANDI	0 2		& TEN BITS COME FROM THIS WORD)
		(1777)
		(ANDI	1 1		& SIX FROM THIS ONE)
		(77)
		(ROT	1 6.)
		(ADD	0 1)
		(ANDI	1 0		& ONLY 9 BITS FOR MOVE)
		(777			& DO IT HERE SO THE SIGN IS RIGHT)
		(GET	2 SCRATCH)
		(POPJ)
invert		(subi 	0 0)
		(0)
		(pushj	multiply)
		(pushj cons-up)
		(subi	1 1)
		(0)
		(subi	0 0)
		(0)
		(popj)
RESTORE-DSR	(GET	0 DSR-STATE)
PUT-DSR		(PUT	0 DSR)
		(POPJ)

T-PENUP		(LOD	0	& TEMPORARY PEN UP)
		(7)
SET-DSR-PEN	(GET	1 DSR-STATE)
		(ANDI	1 1)
		(17777)
		(ANDI	0 0)
		(7)
		(ROT	0 3)
		(ADD	0 1)
		(JUMP	PUT-DSR)

GETARG		(ROT	0 11.	& EXTRACTS 11 BIT SIGNED ARG FROM 0)
		(ARS	0 3)
		(ARS	0 2)
		(POPJ)

NORMALIZE	(LOD	1		& NORMALIZES -1 < REG 0 < 360.)
		(360.)
TOO-LOW		(NOP	0		& JUMP HERE FOR OTHER NORMS)
		(BPL	TOO-HIGH)
		(ADD	0 1)
		(JUMP	TOO-LOW		& KEEP ADDING REG 1 UNTIL IT IS POSITIVE)
TOO-HIGH	(SUB	0 1		& DONE LIKE THIS TO SAVE REGISTERS)
		(BPL	TOO-HIGH)
		(ADD	0 1)
		(POPJ)

TRIG-LOOKUP	(GET	1 HEADING	& FINDS SIN AND COS OF HEADING)
		(LOD	0 		& FROM 90 WORD SINE TABLE)
		(90.)
		(SUB	1 0		& WHICH QUADRANT?)
		(BMI	QUAD1)
		(SUB	1 0)
		(BMI	QUAD2)
		(SUB	1 0)
		(BMI	QUAD3)
		(SUB	1 0)
		(BMI	QUAD4)
		(ERROR			& HEADING IS NOT LESS THAN 360)

QUAD1		(PUSHJ	GETTRIG		& THIS WILL GET THE RIGHT MAGINTUDES)
		(ADD	SIN 0		& BUT THEY NEED TO BE SORTED WITH)
		(ADD	COS 1		& REAGARD TO SIGN AND PHASE)
		(POPJ)
QUAD2		(PUSHJ	GETTRIG)
		(ADD	SIN 1)
		(SUB	COS 0)
		(POPJ)
QUAD3		(PUSHJ	GETTRIG)
		(SUB	SIN 0)
		(SUB	COS 1)
		(POPJ)
QUAD4		(PUSHJ	GETTRIG)
		(SUB	SIN 1)
		(ADD	COS 0)
		(POPJ)

GETTRIG		(ADD	1 0		& JUST TO GET THINGS POSITIVE)
		(ADDI	0 1)
		(TRIG-TABLE-START)
		(NOP	0		& GETS THE FUNCTION WITH POSITIVE DERIVATIVE)
		(CREAD	4)
		(SUBI	0 1)
		(+ TRIG-TABLE-START 90.)
		(NOP 	0		& FUCTION WITH MINUS DERIVATIVE)
		(CREAD	5)
		(GET	0 4		& POS SLOPE)
		(GET	1 5		& NEG SLOPE)
		(SUB	SIN SIN)
		(SUB	COS COS)
		(POPJ)



CHECK-INTS	(BIS SERV-INTERUPT)
		(POPJ)


( & TEXT DISPLAY INTERRUPT ROUTINES )


(CALL 0 BLANK)
(CALL 0 BLANKETY-BLANK)
(CALL 202 CRSR-IMAGE)
(CALL 203 CRSR-COMPL)

(CALL 175777 TV-OFF-CONST)
(CALL 165777 TV-DARK-CONST)
(CALL 173777 TV-GREEN-CONST)
(CALL 161777 DARK-BLANK-CONST)
(CALL 167777 GREEN-BLANK-CONST)
(& call 1 adr)
(CALL 0 CHARS)
(CALL 3 DATA)
(CALL 4 BLNK)

TV-LINE		(GET  ADR  LINE 	& START OF CURRENT LINE)
		(get chars xr)
		(put chars isav-5	& save the xr)
		(LOD CHARS		& count through all 36 words in a line)
		(- 35.)
  		(PUT CHARS  XR		& use the xr for a faster loop)
CHAR-LOOP	(READI ADR  CHARS	& note that the xr should be saved by wrap)
		(CHARTV CHARS		& send the LOWER BYTE to the tv)
		(GET CHARS  CHARS       & **** YEECH!)
		(ROT  CHARS  8.)
		(CHARTV CHARS		& send the UPPER BYTE to the tv)
		(GET CHARS  CHAR        & **** YEECH!)
		(BXSI CHAR-LOOP)
		(CHARTV CHARS		& SEVENTY THIRD CHARACTER)
		(GET CHARS CHARS	& **** YEECH!)
 		(PUT ADR LINE		& UPDATE LINE to be displayed)
		(GET ADR ISAV-2		& RESTORE REGISTERS)
		(get chars isav-5	& restore xr)
		(put chars xr)
		(GET CHARS ISAV-1)
		(jump	check-ints)

(  CALL 0 X)
(& CALL 1 ADR)
(& CALL 3 DATA)
(  CALL 4 CNT)
(& some of this code looks useless and although it really is)
(& it is being left as the skeleton of a cursor cartoon)

TV-PAGE		(GET  X  SCR-VALUE	& SEND SCROLL AND RESET INTERRUPT)
		(PUT  X  SCROLL)
		(PUT  3  ISAV-3		& SWAP CLOBBERS ALL)
		(PUT  6  ISAV-4)
		(PUT  7  ISAV-5)
		(put  4	 isav-6)
		(put  5  isav-7)
		(get x cursor-kludge	& see if we should update cursor)
		(nop x			& get doesn't set conditionals)
		(bne no-update)
		(pushj swap		& swaps cursor out to change cartoon frame)
		(get x clock		& timing cartoon)
		(rot x 4		& find adr of next frame)
		(andi x)
		(1)
		(addi x)
		(0)
		(put x crsr-repl	& stick in new frame)
		(pushj swap)
no-update	(GET  X  FLASH-TIME	& CHECK STATE OF TEXT DISPLAY)
		(NOP  X)
		(BEQ  PAGE-NORM		& 0 IS NORMAL)
		(DEC  X)
		(PUT  X  FLASH-TIME)
		(BNE  PAGE-END		& GREATER THAN 1 IS TEMP OFF FOR BELL FL)
		(PUSHJ TV-ACTIVE	& TURN IT BACK ON SINCE ITS READY)

PAGE-NORM	(LOD X			& START PAGE AT BEGINNING OF BUFFER)
		(TEXT-START)
		(PUT  X  LINE)
PAGE-END	(GET  3 isav-3)
		(get  6 isav-4)
		(get  4  isav-6)
		(get  5  isav-7)
		(get  7 isav-5)
		(get 1 isav-2		& restore registers)
		(GET  X  ISAV-1)
		(JUMP CHECK-INTS 	& POPJI)




( & EDIT ROUTINES FOR TEXT DISPLAY )

(& CALL 0 X)
(& CALL 0 CHARS)
(& CALL 1 ADR)
(  CALL 2 CHAR)
(& CALL 3 DATA)
(& CALL 4 BLNK)
(& CALL 4 CNT)
(  CALL 4 TOP)
(  CALL 5 COL)
(  CALL 5 XCP)
(  CALL 6 HALF)
(  CALL 7 ZERO)


TV-OFF		(LOD 1)
		(TV-OFF-CONST)
		(JUMP TV-COLOR)


TV-FLASH	(LOD X			& FLASH FOR CTRL-G, 8. 60."S OF A SEC)
		(8.)
		(PUT X FLASH-TIME)
	
TV-BLANK	(LOD 1)
		(GREEN-BLANK-CONST)
		(JUMP TV-COLOR)

TV-ACTIVE	(LOD 1		& GREEN CHARS ON FIELD EBONY)
		(TV-DARK-CONST)

TV-COLOR	(GET X DSR-STATE	& EXPECTS ARGUMENT IN r1)
		(ANDI X X)
		(161777)
		(NOR X X)
		(AND X 1)
		(NOR X X)
		
UPDATE-DSR	(PUT X DSR-STATE)
		(JUMP PUT-DSR)
		
( &    INTERRUPTABLE ROUTINES   )


TV-INIT		(LOD  ADR)
		(TEXT-END)
		(LOD  CNT)
		(2066			&  text buffer length minus 2)
		(LOD ZERO		& TWO BLANKS)
		(BLANKETY-BLANK)
BLANKS-LOOP	(WRITED ADR ZERO)
		(DEC CNT)
		(BPL  BLANKS-LOOP)
		(PUT ADR CRSR-LINE)
		(SUB ZERO ZERO		& make a zero)
		(PUT ZERO CRSR-COL	& crsr is initially at beginning of first line)
		(LOD DATA)
		(202			& CRSR IN POSITION 0, BLANK IN POSITION 1)
		(WRITE ADR DATA)
		(LOD DATA)
		(BLANK)
		(PUT  DATA  CRSR-REPL)
		(PUT ZERO SCR-VALUE)
		(PUT ZERO FLASH-TIME	& INITIALIZE FLASH-TIME)
		(GET 15 X		& reset line interupt)
		(PUT X SCROLL		& reset clock interupt)
		(CHARTV X		& reset line interupt)
		(PUSHJ TV-ACTIVE	& make sure tv is on displaying green chars)
		(JUMP CHECK-INTS	& POPJI)



TV-CHAR		(ANDI CHAR CHAR)
		(177)
		( CMPI CHAR)
		(37)
		(BPL CTRL-CHAR)
		( CMPI CHAR)
		(177)
		(BEQ NULL)
		

INSERT		(PUSHJ WRITE-CHAR)
		(PUSHJ INC-CRSR)
		(JUMP CHECK-INTS	& POPJI)



CTRL-CHAR	(cmpi char)
		(7)
		(beq bell)
		(ROT CHAR 5)
		(BMI hi-ctrl		& look at fifth bit)
		(ROT CHAR -1		& look at fourth bit)
		(bpl null)
		(rot char -1)
		(DIS BUS 7)
		(jump backspace	& 0  character 10)
		(jump tv-active	& 4  character 14)
		(jump LINEFEED	& 2  character 12)
		(jump NULL	& 6  character 16)
		(jump tab	& 1  character 11)
		(jump CAR-RET	& 5  character 15)
		(jump down-crsr	& 3  character 13)
		(jump null	& 7  character 17)

hi-ctrl		(rot char -1		& look at fourth bit)
		(bpl null)
		(rot char -1)
		(dis bus 7)
		(jump inc-crsr	& 0  character 30)
		(jump home-down	& 4  character 34)
		(jump up-crsr	& 2  character 32)
		(jump clr-eol	& 6  character 36)
		(jump backspace	& 1  character 31)
		(jump home-up	& 5  character 35)
		(jump null	& 3  character 33)
		(jump CLR-EOF	& 7  character 37)

NULL		(JUMP CHECK-INTS	& POPJI FOR LOTS INCLUDES HI CNTL CHRS 17 TO 30)
		
		
BELL		(PUSHJ TV-FLASH)
		(JUMP CHECK-INTS	& POPJI)

BACKSPACE	(PUSHJ DEC-CRSR)
		(JUMP CHECK-INTS	& POPJI)



		
TAB		(GET  X CRSR-COL)
		(ANDI X X )
		(7)
		(SUBI X X )
		(7)
		(LOD CHAR)
		(BLANK)
TAB-STEP	(PUSHJ WRITE-CHAR)
		(PUSHJ INC-CRSR)
		(DEC X)
		(BPL TAB-STEP)
		(JUMP CHECK-INTS	& POPJI)


TV-QUOTE	(ANDI CHAR CHAR)
		(177)
		(PUSHJ INSERT)
		(JUMP CHECK-INTS	& POPJI)


INC-CRSR	(GET COL CRSR-COL)
		(CMPI COL)
		(71.)
		(BEQ END-L)	
		(PUSHJ MOVE-RIGHT)
END-L		(JUMP CHECK-INTS	& POPJI)



DEC-CRSR	(GET COL CRSR-COL)
		(NOP COL)
		(BEQ begin-l)
		(PUSHJ MOVE-LEFT)
BEGIN-L		(JUMP CHECK-INTS	& POPJI)


WRITE-CHAR	(PUT CHAR CRSR-REPL)
		(JUMP CHECK-INTS	& POPJI)


HOME-UP		(PUSHJ  swap		& puts crsr at lower left corner of screen)
		(SUB COL COL)
		(PUT COL CRSR-COL)
		(LOD COL)
		(TEXT-START)
		(PUT COL CRSR-LINE)
		(PUSHJ swap)
		(JUMP CHECK-INTS	& POPJI)

HOME-DOWN	(PUSHJ swap		& puts crsr at upper left corner of screen)
		(sub col col)
		(PUT COL CRSR-COL)
		(LOD COL)
 		(+ TEXT-START * 36. 29.	& BEGINNING OF LAST LINE)
		(PUT COL CRSR-LINE)
		(PUSHJ swap)
		(JUMP CHECK-INTS	& POPJI)

CAR-RET		(PUSHJ swap		& puts crsr at beginning of current line)
		(sub col col)
		(PUT COL CRSR-COL)
		(PUSHJ swap)
		(JUMP CHECK-INTS 	& POPJI)


CLR-EOL		(pushj swap)
		(pushj eo-subr1		& clears to end of line)
blank-them-eol	(lod cnt		& and then blank the rest of the line)
		(36.)
		(ars col 1)
		(sub cnt col)
		(dec cnt)
		(pushj blanker-loop)
		(pushj swap)
		(jump check-ints	& popji)


clr-eof		(pushj swap)
		(pushj eo-subr1		& clears to end of page)
blank-them-eof	(lod cnt)
		(text-end)
		(sub cnt adr)
		(pushj blanker-loop)
		(pushj swap)
		(jump check-ints	& popji)

eo-subr1	(get col crsr-col	& divides col by 2 to get adr in text buffer)
		(get adr crsr-line	& and sets condition on lowest bit to see)
		(ars col 1		& if crsr is in lower or upper byte)
		(add adr col)
		(get col crsr-col)
		(t rot col 1)
		(dis bus 1)
		(popj & if cursor is in lower byte)

eo-subr2	(read adr data		& else blank upper byte)
		(andi data data)
		(377)
		(writei adr data)
		(addi col col)
		(2)
		(popj)

UP-CRSR		(PUSHJ swap)
		(GET ADR CRSR-LINE)
		(CMPI ADR)
		(TEXT-START)
		(BEQ END-UP)
		(addI ADR ADR)
		(-36.)
		(PUT ADR CRSR-LINE)
END-UP		(PUSHJ swap)
		(JUMP CHECK-INTS	& POPJI)


down-crsr	(get adr crsr-line	& test for last line)
		(cmpi adr)
		(+ text-start * 36. 29.  & if on last line dont do anything)
 		(beq null		& otherwise do a linefeed)

LINEFEED	(PUSHJ swap		& moves cursor straight down to next line)
		(GET ADR CRSR-LINE	& if at bottom of screen scrolls screen up)	
		(CMPI ADR		& TEST FOR LAST LINE)
		(+ TEXT-START * 36. 29.)
		(BNE MID-SCREEN)
		(PUSHJ REALLOC-TXT)
		(LOD ADR		& AND THEN BLANK OUT LAST LINE)
		(+ TEXT-START * 36. 29.)
		(LOD CNT)
		(35.)
		(PUSHJ BLANKER-LOOP)
		(jump end-lf)
MID-SCREEN	(GET ADR CRSR-LINE)
		(ADDI ADR ADR)
		(36.)
		(PUT ADR CRSR-LINE)
end-lf		(PUSHJ swap)
		(JUMP CHECK-INTS	& POPJI)


MOVE-RIGHT	(PUSHJ swap)
		(GET COL CRSR-COL)
		(INC COL)
		(PUT COL CRSR-COL)
		(PUSHJ swap)
		(JUMP CHECK-INTS	& POPJI)


MOVE-LEFT	(PUSHJ swap)
		(GET COL CRSR-COL)
		(DEC COL)
		(PUT COL CRSR-COL)
		(PUSHJ swap)
		(JUMP CHECK-INTS	& POPJI)


SWAP		(get adr crsr-line	& swaps crsr with crsr-repl)
		(get col crsr-col)
		(get zero crsr-repl	& the char thats going to be stuck in)
		(ars col 1		& divide it by 2 to get distance in buffer)
		(add adr col		& adr of word with crsr in it)
		(read adr data)
		(andi top data		& zero the lower byte result into top)
		(177400)
		(andi data data		& zero the upper byte result into data)
		(377)
		(get col crsr-col)
		(rot col 1		& upper or lower byte to be replaced?)
		(bmi upper-byte)	
		(ior top zero		& stick the replacement in the lower byte)
		(put data crsr-repl	& usually the crsr)
		(write adr top)
		(popj)
upper-byte	(rot zero 8.		& put the char in the high bits)
		(ior data zero		& stick it in)
		(rot top 8.		& put the crsr in the low bits)
		(put top crsr-repl)
		(write adr data)
		(popj)

		
BLANKER-LOOP	(LOD 7			& BLANKS V4 LOCS FROM V1)
		(BLANKETY-BLANK)
		(put 4 cursor-kludge	& keep watch while the loop clears)
b-loop		(WRITEI 1  7		& ARGUMENTS IN 1 AND 4)
		(pushj check-ints)
		(DEC 4)
		(BPL B-LOOP)
		(sub 4 4			& get it back to zero)
		(put 4 cursor-kludge)
		(POPJ)


REALLOC-TXT	(LOD ADR		& moves text up one line, flushing first line)
		(+ text-start 36.	& start reading from beginning of second line)
		(lod 7			& start writing into beginning of first line)
		(text-start)
		(put 7 cursor-kludge	& handy non-zero number)
REALLOC-LOOP	(READi ADR DATA)
		(pushj check-ints	& to avoid missing things while the loop grinds)
		(writei 7 data)
		(cmpi adr)
		(+ text-end 1	& do it until last read is end of last line )
		(bne realloc-loop)
		(sub 0 0)
		(put 0 cursor-kludge 	& set ok to swap flag)
		(POPJ)



trig-table-start (0)
		 (1073)
		 (2167)
		 (3262)
		 (4355)
		 (5447)
		 (6541)
		 (7631)
		 (10720)
		 (12005)
		 (13071)
		 (14154)
		 (15234)
		 (16312)
		 (17367)
		 (20440)
		 (21507)
		 (22554)
		 (23615)
		 (24653)
		 (25706)
		 (26736)
		 (27762)
		 (31003)
		 (32017)
		 (33027)
		 (34034)
		 (35033)
		 (36027)
		 (37015)
		 (37777)
		 (40754)
		 (41723)
		 (42666)
		 (43623)
		 (44552)
		 (45473)
		 (46407)
		 (47315)
		 (50214)
		 (51106)
		 (51771)
		 (52645)
		 (53513)
		 (54351)
		 (55201)
		 (56022)
		 (56634)
		 (57436)
		 (60231)
		 (61014)
		 (61570)
		 (62334)
		 (63070)
		 (63615)
		 (64331)
		 (65035)
		 (65530)
		 (66213)
		 (66666)
		 (67331)
		 (67762)
		 (70403)
		 (71013)
		 (71412)
		 (72000)
		 (72356)
		 (72722)
		 (73255)
		 (73576)
		 (74106)
		 (74405)
		 (74673)
		 (75147)
		 (75411)
		 (75642)
		 (76061)
		 (76267)
		 (76462)
		 (76644)
		 (77015)
		 (77153)
		 (77300)
		 (77412)
		 (77513)
		 (77602)
		 (77657)
		 (77722)
		 (77753)
		 (77772)
		 (77777)
		 (0)
 
		 

))		T)  




